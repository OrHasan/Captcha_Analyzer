GIT Commits:

Version 2
+ Added the Data/History folders to sync the history of past runs between different machines
+ Code changes:
 * main:
  - Fixed "use_median" & "use_dilate_erode" - will now be True/False instead of String type
  - Added Selenium Webdrive selection according to the host system (by using Gershon code: "detect_arch")
  - Added more folders division for the history results
  - Fixed the history result pictures indexes
  - The cleared captcha file will also be used for the history results in the end of each loop instead of leaving it in the "Data" folder
  - Added the attempt number to each result in the "History" folder
 
 * def_config_file:
  - Added new sections to the Configurations file (data_folder, process_history_dir, cleared_history_dir, methods_test_dir)
  - Added dependencies between different sections & keys if they are using the same root ( %(..)s, ${..:..} )
  - Fixed places with constant file name and replaced it with his variable
  
 * local_test:
  - Fixed "use_median" & "use_dilate_erode" - will now be True/False instead of String type
  - Added filters test folders creation in case they don't exist
  - Added a test for the uniformity of the results for the "Model Test" instead of the need for the user to check it by himself


Version 2.1
Added requirements file


Version 3
+ Added .gitignore
+ Moved code files from "Code" folder to "lib" folder (works better when loading the files)
+ Fixed the configurations file. Instead of using both "%()s" & "${}", using just the "${}" format
+ Added more image history files
+ Added version history notes file (may have missing data, a first try to work with such file)
+ New code:
 * general_funcs:
  - Seperated the "captcha_funcs" functions file into captcha relevant functions and more general ones
  
 * load_analyzer_config_file:
  - Takes care of all the configuration data inside an orderly class. Replacing many lines inside the "main" & "local_test", and removed the need of huge amount of variables to each function.
  
+ Code changes:
 * main:
  - Added "ExtendedInterpolation" to use the extended interpolation ("${}") instead of the regular interpolation ("%()s") inside the configurations file
  - Removed all the lines that loaded the configuration file variables (see: "load_analyzer_config_file")
  
 * local_test:
  - Added "ExtendedInterpolation" to use the extended interpolation ("${}") instead of the regular interpolation ("%()s") inside the configurations file
  - Removed all the lines that loaded the configuration file variables (see: "load_analyzer_config_file")
  - Added a direct import to "makedirs"
  - Replaced the "model_test_results" for loop with list comprehensions ("inline for")
  - Added a simple description for the progress bar

 * captcha_funcs
  - Removed the need of huge amount of variables to each function (see: "load_analyzer_config_file")
  - Commented a print line to avoid a conflict with the updating terminal progress bar (printing while he is updating will lead to multiple lines of the progress bar). For the same reason the "client_config" is being loaded externally as the client is loaded directly from the "load_analyzer_config_file" file and prints an automatic message to the terminal after it been loaded
  
 * local_test_funcs:
  - Removed the need of huge amount of variables to each function (see: "load_analyzer_config_file")

 * def_analyzer_config_file:
  - Changed to more specific name from "def_config_file" so there will be some different from other projects
  - replaced "%()s" interpolations with "${}" ones
  - Copied changed made in the Dorking project:
  -- Moved all the free lines after the functions into a new function named "read_config_file" that need to be first called from the main program ("config_file" constant is now a function input)
  -- Added "config.read(config_file)" line after every time the configuration file is changed to also update the program loaded data


Version 3.1
+ Fixed the "requirements.txt" file
+ Little changes as to automatic code inspection, including: typos & missing spaces


Version 3.2
+ New code: moved the main part of the code into "solve_captcha" file
+ Added 2 new parameters:
 - selenium_minimum_wait, to declare minimum wait time for an element before throwing an error
 - selenium_condition_wait, to declare how much time to wait in case of a specific condition for an element (currently not in use)
+ Combined the 4 files count indexes variables to a single key-value pairs
+ Added function output of the page cookies (ZHE & PHPSESSID) to be able to use them to pass the captcha request in other codes
+ Added program terminate condition in case of failing to solve the captcha in all the attempts
+ Added more image history files


Version 3.2.1
+ Added Zone-h webpage picture


Version 3.3
+ Added __name__ == "__main__" so the main can run as a standalone or as callable function
+ Removed "#" from 2 driver option lines


Version 3.3.1
+ Added the new History folder picture and this file


Version 3.3.2
Changed the visual debug to false in the default configuration file:
[debug]
show_comparison = False


Version 3.4
+ "analyzer configurations.ini" captcha_attempts changed to 50 + three new variables:
 - capcha_maximum_length: Maximum possible letters to take into account in the transcription result
 - letters_only: Replace any numbers in the transcription result with similar letters
 - close_on_finish: Close the driver (&browser) when the captcha transcription process is done
 
+ "README.md" file update with the new configuration's variables (capcha_maximum_length, letters_only & close_on_finish)
+ Fixed a missing requirement: "gradio_client~=0.8.0"
+ Code changes:
 * main:
  - Set "driver" as global so it will be stayed in memory in case it doesn't need to be closed in the end of the process
  - Added driver close condition that can controlled through the configurations file
  
 * load_analyzer_config_file:
  - Little rearrangement, so the functions will be in the same order as the configurations file
  - Fix for the "show_comparison" variable to be called as boolean instead of text
  - Addition of the 3 new variables
  
 * solve_captcha:
  - New function - remove_numbers: if "letters_only" is True, replace transcription result numbers with similar letters (include debug lines to show the result before and after this change)
  - Disabled the "sys.exit(1)" line


Version 3.5
+ To be able to run the code even if the website is changing fields parameters, replaced 2 configuration variables:
 - text_field_name -> text_field_css_selector
 - submit_button_xpath -> submit_button_css_selector
+ Website URL as been updated to pass also the ".il" filter captcha


Version 3.6
Contain variety of changes made for the Cyber conference in March. It seems those specific changes were tracked for a commit but have not committed, so this description may contain holes:
+ Added history folder for the original captchas
+ Changed the default filtering method from Median filter, to Dilate & Erode filters
+ Moved old history fails to a new directory: "with some false negatives of 2nd captcha", as to the discovery of the 2nd captcha that was always came after the previous captcha led the 1st to be detected as incorrect result
+ Added 50 new database captchas for the local test, after manually verifying that each one of them is correct, unlike the previous 7 ones that now been moved to the folder "unverified results" (same to their results inside the "methods test" folder). In addition, most of these captchas are inside a folder named "not included in the next local test", just to avoid running each time on all the 50
+ Added a picture of website of the used API
+ Added WORD document (Captcha Analyzer Description.docx) with the code description in short
+ Added EXCEL document (Captcha Analyzer Statistics.xlsx) with a full comparison between 7 different filtering methods on 50 captchas with verified results, including graphs
+ Updated all the project libraries + requirements file

+ New configurations:
 [general]
 - save_history - enables control on the history folder. True = save each captcha, filtered captcha & filtering process of the captcha in the history folder
 - captcha_history_dir - location of the new original captchas directory
 - capitals_only - force capital letters in the captcha result string
 - fix_similar_small_letters - replace small letters in the result with different capital letters, according to previous repeated detection mistakes
 
 [filter]
 - use_median_mask - after median filter, use the original picture as a mask to remove new pixels from originally empty spots, to avoid adding additional noise
 - dilate_kernel_size & erode_kernel_size - previously called "dilate_erode_kernel_size". now each filter got his own kernel if needed
 - dilate_iterations & erode_iterations - previously called "dilate_erode_iterations". now each filter got his own iterations amount if needed
 
 [local_test]
 - filter_1_masked_dir, filters_1_2_3_masked_dir, 5_steps_filtering_dir, 6_steps_filtering_dir - directory location to save the results of an additional 4 filtering methods in the local test
 
+ New code:
 * check_status:
  - Was originally inside "solve_captcha"
  - Able to detect now when passing the captcha and proceeding to another one instead of mark it as a fail
  - Added option to disable the history files saving (captcha files will be deleted after use)
  - Added a file move of the original captcha to the history directory
  
 * process_plot:
  - Was originally inside "general_funcs"
  - Added plot support fo the 5/6 multistep filtering methods
  
 * image_filters:
  - Image filtering functions that are mostly based on the filters inside "captcha_funcs" with additions
  - The parameters of Median filter and Dilate&Erode filters can now be taken automatically from the configurations file or with manually inserted values, while using error-handling system to varify all the needed parameters to each option were inserted (if not, an error message will appear in the terminal, but the program will continue to run while the filter will return the original picture without any filter)
  - Dilate&Erode function also supports "method" selection:
   1- "dilation & erosion" - dilate the picture, then erode it
   2- "erosion & dilation" - erode the picture, then dilate it
   3- "erosion" - erode the picture (without dilation)
   4- "dilation" - dilate the picture (without erosion)
  - New filter function: "remove_additional_pixels" - use the original picture as a mask to remove new pixels from originally empty spots
  
 * experimental_filters:
  - The place to find tested filters that for now decided to not use them
  - Existing filters:
   1- sharp_img - make the image sharper
   2- detect_edges - show the edges of the elements in the image, with selection between 2 methods: "square" / "plus"
   3- resize_img - choice new image dimensions or rescale it with selected percentage
   4- remove_noise_colors - remove only the colors used in the added captcha noise (colors list isn't completed)
   5- show_letters_color_only - show only the colors used in the captcha letters (colors list isn't completed)
   
+ Code changes:
 * main:
  - Added file indexes for the new captcha history folder
  
 * solve_captcha:
  - "remove_numbers" function was moved to "captcha_funcs" and renamed to "remove_numbers_and_fix_small_letters", as it is now responsible to deal with more variety of common analyze mistakes, as follows:
      e -> C ; l -> I ; 0 -> O ; 1 -> I ; 2 -> Z ; 3 -> B ; 4 -> A ; 5 -> S ; 6 -> E ; 7 -> X ; 8 -> B ; 9 -> O
  
 * detect_arch:
  - Disabled the Chrome local webdriver loading and replaced it with the build-in auto-download feature, according to the installed version of Chrome browser, to prevent from the code to be broken in future Chrome releases (the local driver files may be deleted in a future commit as to this change)
  
  
  Version 3.7
Code merge with "Ron Khudadedi" to extract data from the website after solving the captcha, while sending to the new code the "ZHE" & "PHPSESSID" cookies, so it won't be asked to solve a captcha, even if the 2 codes will run from a different computer & browser type.
+ Old main function was moved to "general_funcs" with the new name: "solve_captcha_and_get_cookie"
+ Fixed a printed text inside "solve_captcha" to be more accurate according the previous algorithm update
+ As always, pushed the new history database pictures
+ Ron code been improved from the used source, this is some of those changes:
 * Added a load bar to the IP extraction from the URLs process, so it won't look like the program been stuck, as errors to receive the URL IP can really impact the run time
 * Removed unused future functions and debug lines
 * Added new parameters into "analyzer configurations.ini" (and updated as well in "def_analyzer_config_file" & "load_analyzer_config_file"):
  - sql_file_name - The name of the SQL file where the extracted data will be saved
  - pages_to_scan - How many pages to scan from the website (as this is a fork version from my original code for 'Cyber7' for demonstration purpose only, the default value is 2 instead of 50 pages to save run time)